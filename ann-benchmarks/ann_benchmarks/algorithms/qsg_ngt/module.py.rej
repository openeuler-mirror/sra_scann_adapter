--- ann_benchmarks/algorithms/qsg_ngt/module.py	2025-04-15 22:58:40.000000000 +0800
+++ kscann/ann-benchmarks/ann_benchmarks/algorithms/qsg_ngt/module.py	2025-05-26 10:29:36.587622560 +0800
@@ -2,11 +2,10 @@
 import struct
 import subprocess
 import time
-import importlib
-import gc
+
 import ngtpy
 from sklearn import preprocessing
-import numpy as np
+
 from ..base.module import BaseANN
 
 
@@ -31,9 +30,6 @@
         self._rangeMax = int(param["rangeMax"])
         self._searchA = int(param["searchA"])
         self._ifES = int(param["ifES"])
-        self._Q = int(param['Q'])
-        self._era = int(param["era"]) if "era" in param.keys() else 0
-        
         print("QSG: edge_size=" + str(self._edge_size))
         print("QSG: outdegree=" + str(self._outdegree))
         print("QSG: indegree=" + str(self._indegree))
@@ -43,31 +39,27 @@
         print("QSG: object_type=" + object_type)
         print("QSG: range=" + str(self._range))
         print("QSG: threshold=" + str(self._threshold))
-        print("QSG: Q=" + str(self._Q))
-        print("QSG: era=" + str(self._era))
-        
+
     def fit(self, X):
         print("QSG: start indexing...")
-        clear_cache = "sync; echo 3 > /proc/sys/vm/drop_caches"
-        os.system(clear_cache)
         dim = len(X[0])
         print("QSG: # of data=" + str(len(X)))
         print("QSG: dimensionality=" + str(dim))
         index_dir = "indexes"
         if not os.path.exists(index_dir):
             os.makedirs(index_dir)
-        index = os.path.join(index_dir, "ONNG-{}-{}-{}-{}-{}".format(self._edge_size, self._outdegree, self._indegree, self._max_edge_size, self._Q))
+        index = os.path.join(index_dir, "ONNG-{}-{}-{}".format(self._edge_size, self._outdegree, self._indegree))
         anngIndex = os.path.join(index_dir, "ANNG-" + str(self._edge_size))
         print("QSG: index=" + index)
-        if (not os.path.exists(anngIndex)):
+        if (not os.path.exists(index)) and (not os.path.exists(anngIndex)):
             print("QSG: create ANNG")
             t = time.time()
             args = [
                 "ngt",
                 "create",
                 "-it",
-                "-p1",
-                "-b25",
+                "-p8",
+                "-b500",
                 "-ga",
                 "-of",
                 "-D" + self._metric,
@@ -83,15 +75,13 @@
                 "-M" + str(self._rangeMax),
                 "-A" + str(self._searchA),
                 "-H" + str(self._ifES),
-                "-Z" + str(self._era),
                 anngIndex,
             ]
             subprocess.call(args)
-            file_name = anngIndex + '/init_obj'
-            print("file_name : ", file_name)
-            X.astype('float32').tofile(file_name)
-            gc.collect()
-            print(subprocess.run(['python3', '/home/app/create.py', anngIndex, str(X.shape[0])]))
+            idx = ngtpy.Index(path=anngIndex)
+            idx.batch_insert(X, num_threads=24, debug=False)
+            idx.save()
+            idx.close()
             print("QSG: ANNG construction time(sec)=" + str(time.time() - t))
         if self._ifES == 1:
             if self._metric == "E":
@@ -184,26 +174,24 @@
             ]
             subprocess.call(args)
             print("QSG: degree adjustment time(sec)=" + str(time.time() - t))
-        if (not os.path.exists(index + "/qg")):
+        if not os.path.exists(index + "/qg"):
             print("QSG:create and append...")
             t = time.time()
-            args = ["qbg", "create-qg", index, "-Q" + str(self._Q)]
+            args = ["qbg", "create-qg", index]
             subprocess.call(args)
             print("QSG: create qg time(sec)=" + str(time.time() - t))
-        if (not os.path.exists(index + "/qg/grp")):
             print("QB: build...")
             t = time.time()
             args = [
                 "qbg",
                 "build-qg",
                 "-o" + str(self._sample),
-                "-M1",
+                "-M6",
                 "-ib",
                 "-I400",
                 "-Gz",
                 "-Pn",
                 "-E" + str(self._max_edge_size),
-                # "-p2",
                 index,
             ]
             subprocess.call(args)
@@ -211,12 +199,7 @@
         if os.path.exists(index + "/qg/grp"):
             print("QSG: index already exists! " + str(index))
             t = time.time()
-            print("QSG: creating index ")
-            print(X.shape[0] * X.shape[1])
-            if X.shape[0] * X.shape[1] >= 500000000 :
-                self.index = ngtpy.QuantizedIndex(index, self._max_edge_size, objects = X.ctypes.data)
-            else :
-                self.index = ngtpy.QuantizedIndex(index, self._max_edge_size)
+            self.index = ngtpy.QuantizedIndex(index, self._max_edge_size)
             self.index.set_with_distance(False)
             self.indexName = index
             print("QSG: open time(sec)=" + str(time.time() - t))
@@ -224,40 +207,26 @@
             print("QSG: something wrong.")
         print("QSG: end of fit")
         print("QSG:Successfully Build Index")
-        os.system(clear_cache)
 
     def set_query_arguments(self, parameters):
-        if len(parameters) == 6 :
-            se, re, epsilon, approx, b, g = parameters
-            ee = 0
-        else :
-            se, re, epsilon, approx, b, g, ee = parameters
-        print("QSG: se=" + str(se))
-        print("QSG: re=" + str(re))
+        result_expansion, epsilon = parameters
+        print("QSG: result_expansion=" + str(result_expansion))
         print("QSG: epsilon=" + str(epsilon))
-        print("QSG: approx=" + str(approx))
-        self.name = "QSG(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%1.3f,%1.3f,%s,%d,%d,%f,%d)" % (
+        self.name = "QSG-NGT(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %1.3f)" % (
             self._edge_size,
-            self._epsilon,
             self._outdegree,
             self._indegree,
             self._max_edge_size,
-            self._Q,
             str(self._range),
             str(self._threshold),
             str(self._rangeMax),
             str(self._searchA),
             str(self._ifES),
-            se,
-            re,
             epsilon,
-            approx,
-            b,
-            g,
-            ee
+            result_expansion,
         )
         epsilon = epsilon - 1.0
-        self.index.set(epsilon=epsilon, se=se, re=re, approx=approx, b = b, g = g, ee = ee)
+        self.index.set(epsilon=epsilon, result_expansion=result_expansion)
 
     def query(self, v, n):
         return self.index.search(v, n)
